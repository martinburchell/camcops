===============================================================================
Cross-compiling from Linux to Windows
===============================================================================

- MXE
    - http://mxe.cc/build-matrix.html
    - https://stackoverflow.com/questions/14170590/building-qt-5-on-linux-for-windows
    - https://stackoverflow.com/questions/10934683/how-do-i-configure-qt-for-cross-compilation-from-linux-to-windows-target/
- Other/direct to mingw
    - http://forums.codeblocks.org/index.php?topic=3343.0
- http://wiki.qt.io/MinGW-64-bit

===============================================================================
Compiling for Windows (under Windows)
===============================================================================

- Qt instructions
    - https://wiki.qt.io/Building_Qt_Desktop_for_Windows_with_MinGW
- http://silmor.de/qtstuff.qt5mingw.php


===============================================================================
Thus, a typical build_qt run with Visual Studio 2017 Community:
===============================================================================

- add to PATH:
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build

- at command prompt:
    \Python35\python.exe \camcops\tablet_qt\tools\build_qt.py --build_windows_x86_64

===============================================================================
Once you have successfully run build_qt.py --build_windows_x86_64
===============================================================================

ENSURE YOU HAVE QT CREATOR 4.6.0 or higher. Earlier versions can fail to
compile.

-   Set the environment variable CAMCOPS_QT6_BASE_DIR.
    It's where you find directories like
        openssl_windows_x86_64_build
        qt_windows_x86_32_build
        qt_windows_x86_32_install
        qt_windows_x86_64_build
        qt_windows_x86_64_install
        sqlcipher_windows_x86_32
        sqlcipher_windows_x86_64
        src

    By default (as per build_qt.py) it is "dev\qt_local_build" within the
    user's home directory (e.g. C:\Users\MyUser\dev\qt_local_build).

-   Run Qt Creator

-   Open project

-   Define Qt version

    Options > Build & Run > Qt Versions

        Custom_Qt_5_10_0 (qt_windows_x86_64_install) [or similar name]
            ... qt_windows_x86_64_install\bin\qmake.exe

-   Define kit

    Options > Build & Run > Kits

        Custom_Qt_5_10_0_x86_64 [or similar name]

            File system name = [blank]
            Device type = Desktop
            Device = Local PC (default for Desktop)
            Sysroot = ...\qt_local_build\qt_windows_x86_64_install\bin
            Compiler: C = Microsoft Visual C++ Compiler 14.0 (amd64)
            Compiler: C++ = Microsoft Visual C++ Compiler 14.0 (amd64)
            Debugger = Auto-detected CDB at C:\Program Files (x86)\Windows Kits\10\Debuggers\x64\cdb.exe
            Qt version = Qt 5.10.0 (qt_windows_x86_64_install) [i.e. your custom one]
            Qt mkspec = [blank]
            CMake tool = System CMake at C:\Program Files (x86)\CMake\bin\cmake.exe
            CMake generator = CodeBlocks - MinGW Makefiles, Platform: <none>, Toolset: <none>
            CMake configuration =
                CMAKE_CXX_COMPILER:STRING=%{Compiler:Executable:Cxx}
                CMAKE_C_COMPILER:STRING=%{Compiler:Executable:C}
                CMAKE_PREFIX_PATH:STRING=%{Qt:QT_INSTALL_PREFIX}
                QT_QMAKE_EXECUTABLE:STRING=%{Qt:qmakeExecutable}
            Additional Qbs Profile Settings = [blank]

-   Build

PROBLEM:
    Error: dependent 'C:\Users\Rudolf\dev\qt_local_build\qt_windows_x86_64_install\lib\Qt5MultimediaWidgetsd.lib' does not exist.

    ... in debug mode
    ... not sure how to say "make a debug program but with the release version
        of the Qt libraries"
    ... just switch to release mode for now
    ... may simply need to build debug Qt libraries

        python build_qt.py --build_windows_x86_64 --qt_build_type debug

PROBLEM:

    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include\utility(448): error C2338: tuple index out of bounds
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include\functional(802): note: see reference to class template instantiation 'std::tuple_element<0,std::tuple<>>' being compiled
    C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include\functional(494): note: see reference to class template instantiation 'std::result_of<_Fx &(void)>' being compiled
            with
            [
                _Fx=std::_Binder<std::_Unforced,OpenableWidget *(__cdecl SettingsMenu::* )(CamcopsApp &),SettingsMenu *const ,const std::_Ph<1> &>
            ]

    from code like

        MenuItem(
            tr("Questionnaire font size"),
            std::bind(&SettingsMenu::setQuestionnaireFontSize, this,
                      std::placeholders::_1)
        )

    ... this appears to be a VC++ problem; fixable like this:

        MenuItem(
            tr("Questionnaire font size"),
            MenuItem::OpenableWidgetMaker(
                std::bind(&SettingsMenu::setQuestionnaireFontSize, this,
                          std::placeholders::_1)
            )
        )

    ... see also https://stackoverflow.com/questions/25841857
    ... but probably a VC++ bug (works fine in GCC).

PROBLEM

    won't exit after running QolSG
        ... via an OpenableWidget containing a ScreenLikeGraphicsView
        ... to CamcopsApp::open(widget, task)
    ... similarly in HTML fullscreen test, via a HtmlInfoWindow (which is an
        OpenableWidget) to CamcopsApp::open()
    ... it's the fullscreen display that screws it up (confirmed via the
        TestMenu).

    The mouse wheel continues to work (as does the keyboard), but clicks don't,
    including to the window top icons (app icon, minimize, maximize, close).

    Just entering and leaving fullscreen mode doesn't cause problems (added to
    TestMenu). It does flag up the difference between "leaving fullscreen"
    and showNormal(), which also de-maximizes. Note the setVisibility()
    function, which chooses between showNormal(), showFullscreen(), and others;
    also the visibility() function, which reads current state. The docs
    describe this as a convenience function combining the "visible"
    and "windowStates" APIs.

    The problem goes away if the restoration of the previous window state is
    commented out from CamcopsApp::closeSubWindow() [formerly ::close()].

    It does *not* go away if that call to setWindowState() is just moved
    earlier.

    If the call to leaveFullscreen() is removed from closeSubWindow(), the
    problem appears at the moment leaveFullscreen() is called from the test
    menu. This feels like a Qt Windows bug.

    Methods:
    - fullscreen subwindow, auto-return to normal: MOUSE LOST
    - manual fullscreen, manual normal: OK
    - manual fullscreen, normal subwindow open, subwindow close, manual normal: OK
    - fullscreen subwindow, subwindow close (without normal window return),
      manual normal: MOUSE LOST

    Doesn't go away if top->deleteLater() call removed.
    Stripping leaveFullscreen() back to the setWindowState() call: no change.

    Try for minimal reproducible example
        ... with widget that reports keyboard/mouse activity
        ... problem NOT seen in test_fullscreen.pro.
    So is it a problem with my "visible stack + hidden stack" concept?
    What was that for again?
    I think it was to deal with transparent widgets in a stack; was that right?
    No, can't have been that; QStackedWidget only shows one at a time.
    See "July 2017: questionnaire overflowing to right on small phone screens"
    in layout_notes.txt; that was it.
    OK, so let's put the hidden stack concept into our test framework.
    Still works.

    AHA! The thing that screws it up is this call in CamcopsApp::openSubWindow:
        SlowGuiGuard guard = getSlowGuiGuard();
    ALSO, it affects whether the app starts "properly maximized"; removing
    that call makes it start "notionally maximized but actually a small window",
    meaning that you have to un-maximize then maximize in order to get it
    properly maximized.

    Moving getSlowGuiGuard() to a more restricted block fixes the problem.

    Then, initial duff-maximization thing fixed by moving the showMaximized()
    call to the end of CamcopsApp::openMainWindow().

    Then further tweaks to CamcopsApp::leaveFullscreen() because the Windows
    approach didn't work. Platform-specific choice of code.

- Later: consider Wix for installation; http://wixtoolset.org/
