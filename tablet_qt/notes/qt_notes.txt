===============================================================================
Overall design changes 2016
===============================================================================
- Titanium doesn't support Windows binaries well at present (and not at all
  for Windows prior to Win 10). Qt supports all of {Linux, Windows, iOS,
  OS X, Android} and will probably run faster. We're already had speed problems
  at various times with all of: menus, questionnaires, typing.
  CONSIDER: QT FOR TABLETS.

- Code will then be harder for novices to write, but more robust (e.g.
  compiled and type-checked).

- The user interface for web-based editing should be different to that of the
  tablet. The experience with Titanium suggests that running the "tablet" code
  on the web site is dreadful. One could envisage creating a scripting language
  that both the tablet and the web site interpreted (differently). However,
  that'd be pretty tricky and some tasks wouldn't work across platforms (Photo;
  ID/ED; ...).
  So probably best to write separate web editing code (e.g. with Django) for
  questionnaire tasks.

- Could use two databases on the tablet, to simplify the selection process for
  upload (i.e. a 'data' database and a 'system' database).

- Could return BLOBs to the database. Nothing else would change.
  SQLite can handle BLOBs up to 1 GB by default:
  https://www.sqlite.org/limits.html

- Web site to SQLAlchemy and then also Django? Or ??use Django ORM?
  Looks tricky to mix the two.
  http://lethain.com/replacing-django-s-orm-with-sqlalchemy/
  https://www.quora.com/Which-is-better-and-why-Djangos-ORM-or-SQLAlchemy

  BUT will need to think about
    - core fields
    - tablet upload script
    - dual use of dictionaries for XML (etc.) and databases, e.g. summary
      fields

===============================================================================
Licensing
===============================================================================
- Qt Community requires the LGPLv3.
- The LGPL appears to be compatible with app stores (Apple, Google) AS LONG AS
  the work is:
    - fully open-sourced (if static linking required, which it is for older
      iOS versions) (secret source code is compatible with dynamic linking
      but I don't plan to have any secret source code anyway)
    - Qt source is distributed
        *** need to do this; link to Qt not enough; see https://www.qt.io/faq/
    - full instructions for rebuilding are supplied
  See
    https://www.qt.io/faq/
    http://blog.qt.io/blog/2014/10/01/benefits-of-the-indie-mobile-licensing/
    https://wiki.qt.io/Licensing-talk-about-mobile-platforms
- License of CamCOPS should therefore be LGPL v3 (+/- others if dual licensing
  required), or GPLv3.
- The main difference between GPL and LGPL is that anything with GPL licensing
  must be released under the GPL.
  See also
    - http://www.gnu.org/licenses/why-not-lgpl.html
    - http://www.gnu.org/licenses/license-recommendations.html
  Let's use the GPLv3.
    - http://www.gnu.org/licenses/gpl.html
  On including other libraries:
    - http://www.gnu.org/licenses/gpl-faq.html#WhatDoesCompatMean
    - https://www.gnu.org/licenses/license-list.en.html#GPLCompatibleLicenses

- Does the Apple App Store or Google Play Store prohibit any GPL stuff?
    - http://apple.stackexchange.com/questions/6109/is-it-possible-to-have-gpl-software-in-the-mac-app-store
    - http://www.fsf.org/news/2010-05-app-store-compliance
    - http://www.fsf.org/blogs/licensing/more-about-the-app-store-gpl-enforcement
    - http://www.zdnet.com/article/android-vs-iphone-the-gpl-question/
- We can, of course, dual-licence it (at any point). However, we will also
  distribute source code outside of anything like app stores and users can
  compile and run the application on any device they choose.
  So, GPL for now; maybe additional licenses later if required.
  For the server, it's simple (no app stores), and GPL is fine.

===============================================================================
UI elements
===============================================================================
- Core choice is QML (with Javascript) versus QWidgets (with C++).
  I'd prefer C++, for speed and compilation checks.
- Also, there's significant work in the C++/QML interface: e.g.
    https://wiki.qt.io/How_to_Use_a_QSqlQueryModel_in_QML

- Android CSS not working properly for list widgets. Fixed as per:
  https://bugreports.qt.io/browse/QTBUG-45517

===============================================================================
String encoding
===============================================================================
- Follow Qt policy: all source is UTF-8.

===============================================================================
Resources
===============================================================================
- For FILENAMES, use :/dirname/filename.ext
- For URLs, use qrc:///dirname/filename.ext
- https://doc.qt.io/qt-6.5/resources.html

===============================================================================
Short notes on bugs
===============================================================================
- "undefined vtable"? Re-run qmake (from the Build menu).
  This happens when you add something using Q_OBJECT and don't create a new
  source file, I think.
  http://stackoverflow.com/questions/2555816/qt-linker-error-undefined-reference-to-vtable

===============================================================================
Coding conventions
===============================================================================
- ClassName
- functionName, as per Qt
- g_global_variable
- m_member_variable
- any_old_variable
- p_ pointer, m_p_ member pointer (optional in local variables)
- CONSTANT, LONG_CONSTANT
- (avoid Hungarian notation)
- functions:
    - prefer clear verbs, e.g. getX, setX, isX/hasX/doesX
    - but for simple objects, can use e.g. x, setX

===============================================================================
Language and speed
===============================================================================
- Index-based iteration is fastest:
  http://blog.qt.io/blog/2009/01/23/iterating-efficiently/

- Most large Qt objects use a data-sharing, copy-on-write mechanism, including
  QImage and QString;
    https://doc.qt.io/qt-6.5/implicit-sharing.html
  ... so it's fine to pass "copies" around.

===============================================================================
Platforms
===============================================================================
Confirmed:

- Works on Linux with predistributed Qt
- Works on Android emulator with predistributed Qt
- Works on Mac OS X native with predistributed Qt
- Works on iOS with predistributed Qt

- Custom-compiled Qt on Android ARM working
- Custom-compiled Qt on Android x86 working (inc. fast emulator)
- Custom-compiled Qt on Linux (x86 64) working

- Custom compilation required for SQLite - done.
- Custom compilation required for SSL - done.

- Works on Windows 10 native 64-bit with predistributed Qt (as a .exe)
    Visual Studio 2015 Community
    ... which doesn't install C++ by default!
        http://stackoverflow.com/questions/31953769/visual-studio-doesnt-have-cl-exe
    ... then works (with Qt edition for Visual Studio 2015).
  The "add component" tool doesn't seem to come with Windows, so install ALL
  versions you might need (e.g. including 32-bit versions).
- *** NOT YET DONE: standalone .EXE
    http://wiki.qt.io/Build_Standal one_Qt_Application_for_Windows
    http://stackoverflow.com/questions/12654613/static-linking-qt-with-open-source-version
    https://wiki.qt.io/Licensing-talk-about-mobile-platforms#Legal_advice_on_statically_linking_Qt_and_the_LGPL_license
- *** NOT YET TESTED: Windows XP 32-bit
- *** NOT YET TESTED: custom compilation on OSX / iOS

===============================================================================
JDK
===============================================================================
- "... unable to find a javac compiler... Perhaps JAVA_HOME does not point
  to the JDK"; then in Tools / Options / Android / JDK location, "... does not
  seem to be a JDK folder" (under Ubuntu 16.04):
    sudo apt-get install openjdk-8-jdk
  Then the JDK directory is /usr/lib/jvm/java-8-openjdk-amd64

===============================================================================
Compiling, linking
===============================================================================
- See my build_qt.py
- To compile projects in parallel, see
    http://stackoverflow.com/questions/9420825/how-to-compile-on-multiple-cores-using-mingw-inside-qtcreator
- "E/AndroidRuntime( 7355): java.lang.UnsatisfiedLinkError: Couldn't load CamCOPS: findLibrary returned null"
  ... was an error in autogenerated AndroidManifest.xml:
  WRONG: <meta-data android:name="android.app.lib_name" android:value="CamCOPS"/>
  RIGHT: <meta-data android:name="android.app.lib_name" android:value="camcops_tablet"/>
- Use multiple cores: add "-j 8" to the "make" part of the project Build Steps
  (in make -> make arguments)
  http://doc.qt.io/qtcreator/creator-faq.html
- /usr/bin/ld: cannot find -lGL
  must do: sudo apt-get install libgl1-mesa-dev
- Undefined reference to vtable...
  Just added a Q_OBJECT macro? You need to re-run qmake from the Build menu.
  http://stackoverflow.com/questions/2555816/qt-linker-error-undefined-reference-to-vtable

- Runtime error, failing to find libssl.so:
    Starting /home/rudolf/Documents/code/camcops/build-camcops-Desktop_Qt_5_7_0_SSL-Debug/camcops...
    /home/rudolf/Documents/code/camcops/build-camcops-Desktop_Qt_5_7_0_SSL-Debug/camcops: error while loading shared libraries: libssl.so: cannot open shared object file: No such file or directory
    /home/rudolf/Documents/code/camcops/build-camcops-Desktop_Qt_5_7_0_SSL-Debug/camcops exited with code 127
  ... the one we want to be used is e.g.:
    ~/dev/qt_local_build/openssl_linux_build/openssl-1.0.2h/libssl.so

===============================================================================
Core dump
===============================================================================
- http://stackoverflow.com/questions/2065912/core-dumped-but-core-file-is-not-in-current-directory
  ulimit -c unlimited
- use also:
    gdb PROGNAME
    run
    bt

    select-frame <n>
    info locals
    info args

    # http://darkdust.net/files/GDB%20Cheat%20Sheet.pdf

===============================================================================
Other debugging
===============================================================================
- sudo apt-get install valgrind
- Analyze -> Valgrind Memory Analyzer
  http://doc.qt.io/qtcreator/creator-analyzer.html
  ... but can't see any useful output
- http://stackoverflow.com/questions/1593717/is-anyone-using-valgrind-and-qt
- valgrind --leak-check=full ./camcops 2>leaks.txt
- valgrind --leak-check=full --track-origins=yes ./camcops 2>leaks.txt

- Qt Inspector
        http://kdemonkey.blogspot.co.uk/2011/07/qt-inspector.html
        https://www.cs.swarthmore.edu/~adanner/tips/cmake.php
    cd ~/dev
    git clone https://github.com/robertknight/Qt-Inspector
    cd Qt-Inspector
    mkdir build
    cd build
    cmake ..
    # ... doesn't work; complains about protobuf

    sudo apt install libprotobuf-dev
    cmake ..
    # success
    make
    # failure; PROTOBUF_PROTOC_EXECUTABLE-NOTFOUND: not found
    # ... Google suggests missing is protoc

    sudo apt install protobuf-compiler
    make
    # fails

    # clean everything and redo
    # succeeds, in that it builds/runs

    ... but no success in actually connecting to a program

- Basyskom-Inspector

    cd ~/dev
    git clone https://www.gitorious.org/basyskom-inspector/basyskom-inspector.git/

    # doesn't build (simply) with Qt

- Step into Qt source
    Tools -> Options -> Debugger -> Add Qt sources... [then pick "qt5" directory]
    ... nope

- Linker fails with "undefined reference to..." and you disbelieve it
    objdump -t myfile.o -C
  ... then realize that you should use namespaces to prevent problems where
  a .h and .cpp file differ by omission (for example) of a "const".
  http://stackoverflow.com/questions/8474456/how-to-detect-if-h-files-contains-functions-that-arent-defined-in-cpp-file

- GammaRay
    # https://github.com/KDAB/GammaRay/wiki/Getting-GammaRay
    cd ~/dev
    git clone git://github.com/KDAB/GammaRay.git
    cd GammaRay
    cd build
    export PATH="/home/rudolf/dev/qt_local_build/qt_linux_install/bin:${PATH}"
    # ... so the right qmake is found for a custom Qt installation
    cmake ..
    make
    make install

  ... runs, but "there is no default attach injector on this platform"

- valgrind, as above

- Nasty link error:
    "undefined reference to 'QDialog::acceptOrWait(int)'"
    ... having created such a function, then deleted it
    ... was a linker error from multiple moc_*.o files
    ... was due to changes in the original (custom Qt installation) .h filed
    ... I could believe that I mistakenly edited one, but these had all
        changed:
            qcolordialog.h
            qdialog.h
            qerrormessage.h
            qfiledialog.h
            qfontdialog.h
            qinputdialog.h
            qwizard.h
    ... so Qt somehow altered them - not good!

- watch/monitor files
    # sudo apt-get install inotify-tools
    inotifywait -m FILE

- which libraries is my executable using?
    ldd EXECUTABLE

- which files is my executable using?
    strace -e trace=open,close,read,write,connect,accept EXECUTABLE
    strace -e trace=open EXECUTABLE
    strace -e trace=open EXECUTABLE 2>&1 | grep -v font  # ! smaller

- add to library search path
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:newbit
  e.g.
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/rudolf/dev/qt_local_build/openssl_linux_x86_64_build/openssl-1.1.0g
  ... to run in Qt Creator, can also add these to the Run environment.

- run a program with a throttled CPU:
    sudo apt install cpulimit
    cpulimit --limit 10 -- ./camcops
    # 10 refers to 10% of CPU time

===============================================================================
Debug versus release builds; optimizing
===============================================================================

... check with "readelf --debug-dump=decodedline <LIBRARY.so>"

http://stackoverflow.com/questions/12785364/configuration-for-optimizing-qt-creator-compiler
https://forum.qt.io/topic/10612/solved-optimized-compiling-with-qt/3
... QMAKE_CXXFLAGS_RELEASE

http://www.qtforum.org/article/27474/qt-creator-customize-optimization-flags-for-release-build.html


===============================================================================
std::bind and std::function
===============================================================================

- BEWARE: these are not very type-safe. For example, if you have

    QVariant MyClass::getterfunc() { ... }

  then this is fine:

    using GetterFunction = std::function<QVariant()>;
    // ...
    GetterFunc f = std::bind(&MyClass::getterfunc, this, ...);
    QVariant result = f();

  but if you'd accidentally done:

    using GetterFunction = std::function<const QVariant &()>;

  then it won't complain when you do the bind, but will segfault promptly when
  attempting to assign the function's result to a QVariant.

  See also
    http://stackoverflow.com/questions/9063699/can-stdbind-be-type-checked-at-compile-time
    http://stackoverflow.com/questions/1930903/bind-vs-lambda


===============================================================================
Database objects
===============================================================================
- field member variables: initial thoughts:

    - QDjango?
        note also https://doc.qt.io/qt-6.5/qmetaobject.html#details
        ... no
    - a custom DatabaseObject class with fieldname/variant mappings?
        ... no ... YES, see below.
    - QSqlField / QSqlRecord?
        ... yes?
    - ODB? http://www.codesynthesis.com/products/odb/doc/manual.xhtml
    - https://en.wikipedia.org/wiki/List_of_object-relational_mapping_software#C.2B.2B
    - Seems natural to subclass QSqlField, but then we couldn't use it
      in non-pointer ways e.g. for QSqlRecord
      ... so we should implement our own.

- Since C++ static methods cannot be virtual, the approaches possible to
  override field lists are:
  - curiously recurring template pattern, e.g.
    http://stackoverflow.com/questions/2721846
  - plain virtual functions, and instantiate a class to get field list for
    table creation (etc).
  Since a reasonable proportion of "day-to-day" work with fields involves
  knowing fieldspec information (e.g. field types), perfectly reasonable
  to use the latter (which also makes for clearer code).
- Create a derived class for each type of database object, with addField()
  calls in the constructor.

- [Could have non-virtual static member functions, of course, e.g.
  getFieldSpecs() or some such, but then you can't inherit helpful
  defaults.]

- Previous notes on this:

// To make makeTables() static, we need something like:
// - a static member object detailing the fields, via that static member's
//   constructor - e.g. a TableSpec class:
//      static MyTableSpec m_tablespec;
//      ...
//      MyTableSpec::MyTableSpec()
//      {
//          addField("thing", QMetaType::Int);
//          ...
//      }
// - a normal member object containing field values for those fields, e.g.
//      MyFieldValues m_fields;
//      ...
//      MyTask::MyTask() :
//          m_fields(m_tablespec)
//      {
//      }
// - however, I don't see how the static constructor for the fieldspec is going
//   to be able to read other static properties like hasClinician().
//   Others agree:
//      http://stackoverflow.com/questions/1197106/static-constructors-in-c-need-to-initialize-private-static-objects
// - Then beware static init order:
//   https://isocpp.org/wiki/faq/ctors#static-init-order
// - Moreover, functions cannot be both static and virtual.
//   http://stackoverflow.com/questions/1820477/c-static-virtual-members
//   So you can't do, e.g. "virtual static bool anonymous() const { return false; }"
//   and override that in derived classes.
//   All sorts of nasty template hacks follow...
// - So we're probably better off with the idiom that isolated class instances
//   perform "static" functions.
// - http://cplusplus.bordoon.com/static_initialization.html
//   "... the basic rule that class object constructors and static variable
//   initializer expressions should not refer to class static methods or
//   external variables."

- For more sophisticated requirements, note that ODB is available under the GPL:
  http://www.codesynthesis.com/products/odb/features.xhtml
  http://wiki.codesynthesis.com/Using_ODB_with_Qt_Creator_on_Linux
  It copes with migration: http://www.codesynthesis.com/products/odb/doc/manual.xhtml#13.2

- [IGNORE] Also, SQLAPI++, but not free: http://www.sqlapi.com/ -- looks like
  it'd be incompatible with the GPL.

===============================================================================
Factory methods; CRTP; making derived classes from base class; etc.
===============================================================================

- Standard CRTP methods for adding functions
    ... https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern#Polymorphic_copy_construction
  can become overly complex when you try to add a second level of inheritance
    e.g. https://katyscode.wordpress.com/2013/08/22/c-polymorphic-cloning-and-the-crtp-curiously-recurring-template-pattern/
  though the comments have some good ideas, e.g.:

        #include <iostream>

        class Vehicle
        {
        protected:
            int fuelCapacity;

        public:
            Vehicle() {}
            Vehicle(int fuelCapacity) : fuelCapacity(fuelCapacity) {}
            virtual ~Vehicle() {}

            virtual void describe() const = 0;
            virtual Vehicle* clone() const = 0;
        };

        template <typename Base, typename Derived>
        class VehicleCloneable : virtual public Base  // <-- NOTE THIS virtual
        {
        public:
            virtual Base *clone() const
            {
                return new Derived(static_cast<Derived const &>(*this));
            }
        };

        class Car : public VehicleCloneable<Vehicle, Car>
        {
        public:
            Car() {}
            Car(int fuelCapacity) : Vehicle(fuelCapacity) {}

            virtual void describe() const
            {
                std::cout << "I am a car" << std::endl;
            }
        };

        class Plane : public VehicleCloneable<Vehicle, Plane>
        {
        protected:
            int wingSpan;

        public:
            Plane() {}
            Plane(int fuelCapacity, int wingSpan) : Vehicle(fuelCapacity), wingSpan(wingSpan) {}

            virtual void describe() const
            {
                std::cout << "I am a plane" << std::endl;
            }
        };

        class FighterPlane : public VehicleCloneable<Plane, FighterPlane>
        {
        protected:
            int numberOfBombs;

        public:
            FighterPlane() {}
            FighterPlane(int fuelCapacity, int wingSpan, int numberOfBombs)
                : Plane(fuelCapacity, wingSpan), numberOfBombs(numberOfBombs) {}

            virtual void describe() const
            {
                std::cout << "I am a fighter plane" << std::endl;
            }
        };

        int main()
        {
            Vehicle* car = new Car();
            Vehicle* plane = new Plane();
            Vehicle* fighterplane = new FighterPlane();

            car->describe();
            plane->describe();
            fighterplane->describe();

            Vehicle* vehicleUnknown = plane->clone();

            vehicleUnknown->describe();
        }

    ... which works fine (including cloning fighterplane; NB use g++ to
    compile).

- Anyway, the current method works well, based on:

Two of the best articles on this sort of factory method in C++:
- http://accu.org/index.php/journals/597
- http://www.drdobbs.com/cpp/self-registering-objects-in-c/184410633?pgno=1
Note that:
- To do more than one thing, and to deal with classes in the abstract
  without having to instantiate one, we use a proxy class.
See also:
- https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern

- Others also think it reasonable to use a dummy instance for "static"
  purposes:
  http://stackoverflow.com/questions/1820477/c-static-virtual-members

===============================================================================
Pointer management
===============================================================================
- QScopedPointer: for very short lifetimes
- QSharedPointer - MAIN ONE, I THINK, for "own" object management
- QWeakPointer - weak reference to a shared pointer
- QPointer - guarded pointers to QObject
- QSharedDataPointer - pointer to an implicitly shared object
    https://doc.qt.io/qt-6.5/implicit-sharing.html

General algorithm:
1.  If it's owned by Qt (and in that case it will also be a QObject), use a
    QPointer. If Qt deletes the object, your QPointer will become null.
2.  If you own it, and it's not a QObject, use a QSharedPointer.
    ... when the last QSharedPointer to an object goes out of scope, the object
    is deleted.
3.  If you own it, and it *is* a QObject... you should still use a
    QSharedPointer, because a QPointer will not autodelete the object when the
    last one goes out of scope.

And in general, don't "delete this"; your owner should delete you.

===============================================================================
Layout flow
===============================================================================
- http://kdemonkey.blogspot.co.uk/2013/11/understanding-qwidget-layout-flow.html
- If you have a parent widget PW that contains a layout L and that contains
  other child widgets CW1, CW2..., and if you want PW to be resized when L
  re-lays out its CWs, then...
  ? use QWidget::adjustSize
  ? QLayout::setSizeConstraint(QLayout::SetFixedSize)
    ... its effect is in QLayout::activate()
    ... if you setSizeConstraint to QLayout::SetFixedSize, then the PW doesn't
        resize at all
  PART OF THE ANSWER: re-implement the PW's QWidget::resizeEvent(); take the
  PW's width(); ask the layout for its heightForWidth(w); setFixedHeight(h);
  updateGeometry()
  - see FlowLayoutContainer -> renamed HeightForWidthLayoutContainer.
- AND/OR: adjustSize();
- If a widget is not expanding appropriately, SEE ITS ALIGNMENT SETTING.
  For example, Left/Top will get you a widget that does NOT expand to fill its
  container, whereas an alignment of 0 (with an Expanding size policy) will
  give you expansion. See improved version of LayoutDumper.

- In general, what's best?

    // Create then add
    QVBoxLayout* layout = new QVBoxLayout();
    setLayout(layout);
    QWidget* widget = new SomeWidget();
    layout->addWidget(widget);

    // Create with parent
    QVBoxLayout* layout = new QVBoxLayout(this);
    QWidget* widget = new SomeWidget(this);  // can never be shown as a window by accident now
    layout->addWidget(widget);

  See https://doc.qt.io/qt-6.5/layout.html
  The demo code there uses the former.

  However, we had a problem with QuPage, which created widgets with no parent
  and then used setVisible(). This was fixed by adding the widgets to a layout
  first. (And the problem, of multiple tiny windows opening in a cluster, was
  made much more visible by using cpulimit.)


===============================================================================
General layout tips
===============================================================================
- With text paired with a fixed-size indicator widget:
    - do not apply horizontal alignment (prevents text expansion)
    - align the widget TOP
    - align the text VCENTRE
    ... and that deals with
        - small text: sits vertically at the centre of the widget
        - big text: widget sits at the top of the text

===============================================================================
More layout notes
===============================================================================

- Menus weren't word-wrapping properly. This may be a limitation of using
  QListWidget, with QListWidgetItem::setSizeHint. Making the widgets use
  HeightForWidthLayoutContainer didn't help.
  Nor did QListWidget::setResizeMode(QListView::Adjust).
  An alternative might be a QListView with setItemDelegate().
    https://doc.qt.io/qt-6.5/qabstractitemview.html#setItemDelegate

  ... fixed with HeightForWidthListWidget

===============================================================================
Audio
===============================================================================
- Out-of-the-box Qt 5.7:
    Trying to play: QUrl("qrc:///sounds/camcops/portal_still_alive.mp3")
    GStreamer; Unable to pause - "qrc:///sounds/camcops/portal_still_alive.mp3"
    Warning: "No decoder available for type 'application/x-id3'."
    ^^^ RNC: ERROR MESSAGE TYPE 2: gstreamer present but not properly configured
    Error: "Your GStreamer installation is missing a plug-in."
  ... not helped by:
    sudo apt install gstreamer1.0-plugins-bad
    sudo apt install ffmpeg
  ... not helped by:
    sudo apt install gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav ffmpeg
    # https://doc.qt.io/qt-6.5/linux-requirements.html
  Others having same problem:
    https://forum.qt.io/topic/43468/qtmultimedia-media-player-example-can-t-play-any-video-on-ubuntu-14-04/11
  Use:
    strace ./camcops_tablet 2>&1 | grep gstreamer
  ... shows that gstreamer 0.1, not 1.0, being loaded.
  THEREFORE:
    sudo apt install gstreamer0.1-plugins-good gstreamer0.1-plugins-bad gstreamer0.1-plugins-ugly gstreamer0.1-libav ffmpeg
  ... no, not accepted by Ubuntu 16.04
  SO:
      $ sudo apt remove libgstreamer0.10-0
      Reading package lists... Done
      Building dependency tree
      Reading state information... Done
      The following packages were automatically installed and are no longer required:
        libcdaudio1 libenca0 libfaac0 libpam-freerdp libslv2-9 thin-client-config-agent
      Use 'sudo apt autoremove' to remove them.
      The following packages will be REMOVED
        gstreamer0.10-alsa gstreamer0.10-plugins-base gstreamer0.10-plugins-base-apps gstreamer0.10-tools libgstreamer-plugins-base0.10-0 libgstreamer0.10-0
      0 to upgrade, 0 to newly install, 6 to remove and 42 not to upgrade.
      After this operation, 7,625 kB disk space will be freed.
      Do you want to continue? [Y/n]
   THEN Qt says:
      defaultServiceProvider::requestService(): no service found for - "org.qt-project.qt.mediaplayer"
      ^^^ RNC: ERROR MESSAGE TYPE 1 = can't find gstreamer
      Trying to play: QUrl("qrc:///sounds/camcops/portal_still_alive.mp3")
   UNDO things with:
      sudo apt-get install libgstreamer0.10-0 gstreamer0.10-alsa gstreamer0.10-plugins-base gstreamer0.10-plugins-base-apps gstreamer0.10-tools libgstreamer-plugins-base0.10-0 libgstreamer0.10-0
   SO SEE THIS:
      https://doc.qt.io/qt-6.5/whatsnew55.html
      ... configure Qt with -gstreamer 1.0
      ... needs: sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

===============================================================================
Collected Ubuntu requirements
===============================================================================

See build_qt.py (in the instructions at the end).

===============================================================================
Logging
===============================================================================
- Docs say qDebug() etc. include __FILE__, __LINE__...
  https://doc.qt.io/qt-6.5/qmessagelogger.html
  but they don't.
- There's the qCDebug() etc. framework using
    header
        #include <QLoggingCategory>
        Q_DECLARE_LOGGING_CATEGORY(something)
    source
        Q_LOGGING_CATEGORY(something)
        qCDebug(something) << blah;
- But also qSetMessagePattern, which does more.


===============================================================================
Menu structure, class factories, ...
===============================================================================
- no harm in encoding menus fairly manually
- TaskFactory works fine
- main thing to consider then is the Questionnaire implementation
    - a questionnaire has
        simple properties
        a list of pages
            a page has a list of elements
            ...
        can pass in callbacks

    - can't (realistically) use named parameters:
        https://www.reddit.com/r/programming/comments/19bul0/c11_named_parameters_using_operator_suffixes_and/
    - so use this idiom:
        - use setters that return *this
          https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Named_Parameter
    - for list construction, C++11 saves us:
        http://stackoverflow.com/questions/18998488/what-is-the-right-way-to-initialize-a-qlist
        http://stackoverflow.com/questions/16948382/how-to-enable-c11-in-qt-creator

    - so: nice way to specify a list?
        e.g.
            elements = {
                QuestionText("my text").setBold(true),
                QuestionMCQ(
                    "q10",
                    {
                        KeyValuePair("blah0", 0),
                        KeyValuePair("blah1", 1)
                    }
                )
            }
    - so we have setters that return *this
      https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Named_Parameter

- webviews -- not needed, but:
    http://stackoverflow.com/questions/19282255/qwebview-on-qt4-and-qt5
    https://doc.qt.io/qt-6.5/qtwebenginewidgets-qtwebkitportingguide.html
    https://doc.qt.io/qt-6.5/qtwebkit-bridge.html -- old?
    https://www.kdab.com/qt-webchannel-bridging-gap-cqml-web/
    https://doc.qt.io/qt-6.5/qwebchannel.html
    https://doc.qt.io/qt-6.5/qtwebchannel-standalone-example.html
    https://doc.qt.io/qt-6.5/qtwebchannel-javascript.html
    http://stackoverflow.com/questions/9615194/is-it-possible-to-call-a-c-function-from-javascript-in-a-qwebview


===============================================================================
Stored variables
===============================================================================
- This was easy in Javascript because everything is type-free.
- Database storage is easy in Qt, using a QVariant.
- The trick here is the C++ interface.
- Easy part:

    app.setvar("myvarname", value);
    // value will be auto-casted to a QVariant

- Less optimal part:

    app.getvar("myvarname").toInt();  // best we can do?

- Could hard-code some of those...

    int myvar() const {
        return getvar("myvarname").toInt();
    }

===============================================================================
Questionnaire
===============================================================================
- For elements, use SomeElement(...).bold().italic(), using method chaining
  https://en.wikipedia.org/wiki/Method_chaining
  ... the essence being "return *this;"
  ... or "return this" with pointer versions

- Change events:

    FieldRef owns value and mandatory flag
    NULL always means "incomplete"; you can't actively select NULL
    element changes value
        FieldRef::setValue()
            writes internal value for others to read
            emit valueChanged();
                ... any widgets viewing this field get to respond
                ... any other functions (from a task) get to call
                    setMandatory() on other FieldRefs
                    ... emit mandatoryChanged();
                        ... widgets get to respond
        element: emit elementValueChanged();
            page: update things like next button status

    BEWARE: infinite loop (value changed -> mandatory changed -> ...)
    ... best generic way is to block signals (or, if the widget must use
        signals during the operation, to ignore it in the caller's code).

- Widget updates: prefer update() to repaint()
  https://doc.qt.io/qt-6.5/qwidget.html#paintEvent

- Stick with "one element, one field" wherever possible.
  However, have to have the complex MCQs as single entities as they need to
  align *sub*components in a grid; similarly QuMultipleResponse (which has
  multiple Booleans).

- If there are Android camera problems, see:
    https://doc.qt.io/qt-6.5/cameraoverview.html
    https://doc.qt.io/qt-6.5/platform-notes-android.html
    http://www.qtcentre.org/threads/62787-Accessing-android-camera

- Tasks hooking in to questionnaire events:

  (1) Task connects itself to FieldRef::valueChanged, which allows it to deal
      with simple mandatory Y/N stuff.
      It can deal with visible Y/N stuff, via

        m_questionnaire->setVisibleByTag(TAG, ...);

      and if necessary for more complex operations it can use code like

        QuPage* page = m_questionnaire->currentPagePtr();
        for (auto element : page->elementsWithTag(TAG)) { ... }

     Since fields changing is more or less the only interesting thing that
     questionnaires can do, that should be enough...

  (2) For more sophisticated on-the-fly page creation, subclass QuPage and e.g.
      override build().

  (*) Note also signals versus events:
      http://stackoverflow.com/questions/3794649/qt-events-and-signal-slots

===============================================================================
Generic problem: derive from QObject or own one?
===============================================================================
- Derive from QObject:
    - can implement signals directly
    - all-in-one design
    - can't copy, so can't use X().chainmethod().clone() idiom
    - requires Q_OBJECT macro in all classes
    - SAFER: CAN USE deleteLater()
- Own QObject:
    - owned QObject has to do the signals emitting
    - two chains of inheritance (derive QObject/QWidget for new signals;
      derive Openable for everything else)
    - copying is not completely safe (as a member that is a QPointer<QWidget>
      will be shallow-copied only)
- Doesn't matter:
    - slots - QObject::connect() works with QObject signals but also with
      std::bind(...) signals, for arbitrary C++ objects.
    - http://wiki.qt.io/New_Signal_Slot_Syntax

===============================================================================
Signals and slots and bugs
===============================================================================

When you use a questionnaire widget on a FieldRef, the widget connects the
FieldRef's FieldRef::valueChanged to itself. Then, if you rapidly switch
widgets (e.g. in the test menu) and click around, the signal can arrive at a
non-existent widget. Not solved by adding
    widget->deleteLater();

The problem is with the use of std::bind, rather than plain Qt connect.
And specifically with the kind of std::bind from FieldRef to widget seen e.g.
in QuMCQGridDouble. Qt is happy for a QObject to be deleted when it's the
recipient of a signal, but that's not true of lambda functions and std::bind
stuff. Replace this sort of thing:

    connect(fieldref.data(), &FieldRef::valueChanged,
            std::bind(&QuMCQGrid::fieldValueChanged, this, qi,
                      std::placeholders::_1));

with

    class Intermediary {
        Q_OBJECT
        Intermediary::Intermediary(Something* recipient, int param) :
            m_recipient(recipient), m_param(param)
            {}
    public slots:
        void valueChanged(const QVariant& value) {
            m_recipient->valueChanged(value, m_param);
        }
    protected:
        Something* m_recipient;
        int m_qi;
    }

    Intermediary* intermediary = new Intermediary(this, qi);
    connect(fieldref.data(), &FieldRef::valueChanged,
            intermediary, &Intermediary::valueChanged);
    // and store intermediary safely

Shorthand in comments:

    // DANGEROUS OBJECT LIFESPAN SIGNAL: do not use std::bind
    // Safe object lifespan signal: can use std::bind

===============================================================================
Translation
===============================================================================

- Passing a QString to QObject::tr - use qPrintable()
  http://stackoverflow.com/questions/19078879/easier-way-of-passing-qstring-for-objecttr

===============================================================================
Network
===============================================================================

- all network access via a dialogue that's the child of its caller,
      with a log view (cf. my Python code), and "Cancel" and "OK"/"Acknowledge" buttons, of
      which the former is visible during operations and the latter at the end.
  - general form:
        NetworkManager(CamcopsApp& app, const QString& url);
        void post(QMap<QString, QString>& dict, callback_if_succeeds, callback_if_fails, bool add_standard_info);
                // NB pass by reference; password may be added
                // callback if fails should include "user cancelled" reason
                // both callbacks should include reply (blank if cancelled etc.)
        void get(...);  // as above - unlikely to be used
        void status(const QString& message, enum level);  // + facility for colour-coding by level
        void finished();  // show OK button and await dismissal
        void failed();  // show Ack button and await dismissal

- HTTPS POST
    http://stackoverflow.com/questions/2599423/how-can-i-post-data-to-a-url-using-qnetworkaccessmanager

- Network sending: possible to do it with a stream (to which we write data
  from our database)? Would involve QNetworkManager::post with its QIODevice
  version:
    https://doc.qt.io/qt-6.5/qnetworkaccessmanager.html#post
    https://doc.qt.io/qt-6.5/qbuffer.html#details
    https://doc.qt.io/qt-6.5/qtextstream.html
    http://stackoverflow.com/questions/2806274/uploading-a-file-using-post-method-of-qnetworkaccessmanager
  ... realistically, we might want this, but we're going to want to have a
  buffer that takes all the data before we make the network call.
  So it'd be:
    create QByteArray
    create QBuffer (or QTextStream( addressing the QByteArray
    use << to write to the buffer (and thus the QByteArray)
    send the QByteArray using that version of QNetworkManager::post
  Not yet done.

- One QNetworkAccessManager per application (as advised by Qt docs);
  don't start/stop it.

===============================================================================
Containers
===============================================================================
Prefer QVector to QList, except for QList<String> / QStringList:
- https://doc.qt.io/qt-6.5/qlist.html
- https://marcmutz.wordpress.com/effective-qt/containers/#containers-qlist

===============================================================================
Build size
===============================================================================
- 2017-06-13: debug 178M, release (optimized -O3) 40M


===============================================================================
Problems with .cpp files containing const QObjects
===============================================================================

DO NOT LET QT INITIALIZATION CROSS A COMPILATION UNIT BOUNDARY.

Example of how to get it wrong:

    // cardinalexpdetcommon.h

    extern const ButtonConfig BASE_BUTTON_CONFIG;

    // cardinalexpdetcommon.cpp

    const ButtonConfig BASE_BUTTON_CONFIG(...);

    // cardinalexpectationdetection.cpp

    const ButtonConfig CONTINUE_BUTTON_CONFIG = BASE_BUTTON_CONFIG.clone()
            .setBackgroundColour(CONTINUE_BUTTON_BACKGROUND);

... leads to a null pointer crash through QPen, one of the ButtonConfig
members.

I think the problem is that BASE_BUTTON_CONFIG is not guaranteed to be
instantiated before CONTINUE_BUTTON_CONFIG; they could be instantiated in
reverse order, so the clone() function clones garbage.

The problem:
    https://isocpp.org/wiki/faq/ctors#static-init-order
Initialization of static *class* members (not applicable):
    https://stackoverflow.com/questions/16300432/are-static-class-members-guaranteed-to-be-initialized-before-main-is-called
Static initialization of objects in a translation unit:
    https://stackoverflow.com/questions/25007701/is-the-static-initialization-of-global-variables-completed-before-main

Note also this, but that's not the problem here:
    https://www.ics.com/designpatterns/book/globals.html

Solution in this example:
    - move CONTINUE_BUTTON_CONFIG into cardinalexpdetcommon.cpp
    
Note a similar problem with
    const QColor THE_COLOUR("purple");
... see colourdefs.h.

===============================================================================
NOT IMPLEMENTED
===============================================================================

- NOT: patient search bar
  ... because (a) unlikely many patients are present, and
              (b) it confused some people (by hiding options when search active)
