===============================================================================
General height-for-width logic
===============================================================================

- Widgets provide:

    QSize sizeHint()
    QSize minimumSizeHint()
    QSizePolicy sizePolicy()
    bool hasHeightForWidth()
    int heightForWidth(int width)

- Layouts provide:

    minimumSize()
    sizeHint()
    maximumSize()
    hasHeightForWidth()
    heightForWidth()
    minimumHeightForWidth()

- The two prototypical HFW widgets are:

    (a) word wrapping, h ~ k / w
        ... or fixed area, h = k / w
        ... i.e. monotonic decrease in height as width increases

    (b) fixed aspect ratio, h = k * w
        ... i.e. monotonic increase in height as width increases

- Since layouts can combine HFW widgets, the relationship between width and
  height can be complex. For example, with a 20-cell "word wrap" widget (WWW)
  and a 1:1 fixed aspect ratio (FAR) widget:


                        WWW     FAR         WWW above FAR
    sizeHint()          20,1    10,10
    minimumSizeHint()   20,1    1,1

    heightForWidth(1)   20      1           21
    heightForWidth(2)   10      2           12
    heightForWidth(3)   7       3           10
    heightForWidth(4)   5       4           9
    heightForWidth(5)   4       5           9
    heightForWidth(6)   4       6           10
    heightForWidth(7)   3       7           10
    heightForWidth(8)   3       8           11
    heightForWidth(9)   3       9           12
    heightForWidth(10)  2       10          12
    heightForWidth(11)  2       11          13
    heightForWidth(12)  2       12          14
    heightForWidth(13)  2       13          15
    heightForWidth(14)  2       14          16
    heightForWidth(15)  2       15          17
    heightForWidth(16)  2       16          18
    heightForWidth(17)  2       17          19
    heightForWidth(18)  2       18          20
    heightForWidth(19)  2       19          21
    heightForWidth(20)  1       20          22

    layout minimumSize()                    min width 1
                                            min height 1

    layout maximumSize()                    max width 20
                                            max height 20

    layout sizeHint()                       ?? 20,10

- So, if we have them stacked vertically, the HFW function is no longer
  monotonic. We can't, therefore, determine minimum/maximum HFW by shoving in
  0 and QLAYOUTSIZE_MAX.


===============================================================================
RNC: what is the optimal way of doing height-for-width, in theory?
===============================================================================

(1) TRADE OFF HEIGHT AND WIDTH: WORD WRAPPING
    Let's consider a simple word-wrapping widget, which contains 5 "words",
    each 20 units wide and 5 units high, with no other spacing. The widget is
    happy with (w x h):
        100 x 5     all words on first line
         80 x 10    4 + 1, for two lines
         60 x 10    3 + 2, for two lines
         40 x 15    2 + 1 + 1, for three lines
         20 x 25    all words on separate lines, for five lines
    So it will have these parameters:
        minimum width 20            (minimum height 5 = heightForWidth(MAXIMUM width))
        maximum width 100           (maximum height 25 = heightForWidth(MINIMUM width))
        preferred (hint) width 100  (preferred height 5 = heightForWidth(preferred width))
        hasHeightForWidth() -> true
        heightForWidth() -> mapping as above, and any width values in between

    We want its containing layout, like the widget itself, to be able to say:
    "I'd like to be 100 x 5, but if you force me to be 20 wide, then I must be
    25 high."

(2) LOCK ASPECT RATIO
    This hypothetical widget wants to be in a 2:1 aspect ratio, and would
    like to be 100 x 50, but is happy being anything from 10-200 wide.
    So it will have these parameters:
        minimum width 10            (minimum height 5 = heightForWidth(MINIMUM width))
        maximum width 200           (maximum height 100 = heightForWidth(MAXIMUM width))
        preferred (hint) width 100  (preferred height 50 = heightForWidth(preferred width))
        hasHeightForWidth() -> true
        heightForWidth() -> mapping as above, and any width values in between

    Here, the widget is saying "I'd like to be 100 x 50, but if you force me
    to be 20 wide, then I must be 10 high."

What are the things to which a LAYOUT's size matters?

Well, firstly, other layouts. Layouts read the layout parameters of other
layouts just like they do widgets, through the QLayoutItem interface. So we
should try to achieve everything possible by implementing that interface on
our layout, e.g. sizeHint(), minimumSize(), maximumSize().

In a recursive fashion, the guarantee that we (as a layout) will be given an
appropriate height comes from the way that we give our children an appropriate
height, via setGeometry().

That applies to everything except top-level widgets (which own top-level
layouts).


===============================================================================
Robert Knight's blog
http://kdemonkey.blogspot.co.uk/2013/11/understanding-qwidget-layout-flow.html
===============================================================================

Thursday, November 21, 2013

Understanding the QWidget layout flow
-------------------------------------

When layouts in a UI are not behaving as expected or performance is poor, it
can be helpful to have a mental model of the layout process in order to know
where to start debugging.  For web browsers there are some good resources [1]
which provide a description of the process at different levels. The layout
documentation [2] for Qt describes the various layout facilities that are
available but I haven't found a detailed description of the flow, so this is
my attempt to explain what happens when a layout is triggered that ultimately
ends up with the widgets being resized and repositioned appropriately.

1.  A widget's contents are modified in some way that require a layout update.
    Such changes can include:

    -   Changes to the content of the widget (eg. the text in a label, content
        margins being altered)

    -   Changes to the sizePolicy() of the widget

    -   Changes to the layout() of the widget, such as new child widgets being
        added or removed

2.  The widget calls QWidget::updateGeometry() which then performs several      [RNC: QWidget::updateGeometry()]
    steps to trigger a layout:

    1.  It invalidates any cached size information for the QWidgetItem
        associated with the widget in the parent layout.                        [RNC: QWidgetPrivate::updateGeometry_helper()]

    2.  It recursively climbs up the widget tree (first to the parent widget,   [RNC: QLayout::invalidate()]
        then the grandparent and so on), invalidating that widget's layout. The [RNC: QLayout::update()]
        process stops when we reach a widget that is a top level window or
        doesn't have its own layout - we'll call this widget the top-level
        widget, though it might not actually be a window.

    3.  If the top-level widget is not yet visible, then the process stops and
        layout is deferred until the widget is due to be shown.                 [RNC: QLayout::update()]

    4.  If the top-level widget is shown, a LayoutRequest event is posted
        asynchronously to the top-level widget, so a layout will be performed
        on the next pass through the event loop.                                [RNC: QLayout::update()]

    5.  If multiple layout requests are posted to the same top-level widget
        during a pass through the event loop, they will get compressed into a
        single layout request. This is similar to the way that multiple
        QWidget::update() requests are compressed into a single paint event.

3.  The top-level widget receives the LayoutRequest event on the next pass      [RNC: QApplication::notify()]
    through the event loop. This can then be handled in one of two ways:

    1.  If the widget has a layout, the layout will intercept the LayoutRequest [RNC: QLayout::widgetEvent()]
        event using an event filter and handle it by calling
        QLayout::activate()

    2.  If the widget does not have a layout, it may handle the LayoutRequest   [RNC: if QWidget subclasses so desire]
        event itself and manually set the geometry of its children.

4.  When the layout is activated, it first sets the fixed, minimum and/or       [RNC: QLayout::activate()]
    maximum size constraints of the widget depending on
    QLayout::sizeConstraint(), using the values calculated by                   [RNC: AT THIS POINT, LAYOUT SIZE HINTS MUST BE CORRECT]
    QLayout::minimumSize(), maximumSize() and sizeHint(). These functions will
    recursively proceed down the layout tree to determine the constraints for
    each item and produce a final size constraint for the whole layout. This    [RNC: (1) -> QLayoutPrivate::doResize(), in qlayout.cpp]
    may or may not alter the current size of the widget.                        [RNC: (2) -> then QWidget::updateGeometry() for the widget that owns the layout]

5.  The layout is then asked to resize its contents to fit the current size of  [RNC: as above: QLayoutPrivate::doResize(), in qlayout.cpp]
    the widget using QLayout::setGeometry(widget->size()). The specific         [RNC: ... q->setGeometry(rect);]
    implementation of the layout - whether it is a box layout, grid layout or   [     = QLayout::setGeometry()]
    something else then lays out its child items to fit this new size.          [RNC: AT THIS POINT, LAYOUT IS TOLD ITS WIDTH]

6.  For each item in the layout, the QLayoutItem::setGeometry() implementation  [RNC: QLayoutItem::setGeometry()]
    will typically ask the item for various size parameters (minimum size,
    maximum size, size hint, height for width) and then decide upon a final
    size and position for the item. It will then invoke
    QLayoutItem::setGeometry() to update the position and size of the widget.

7.  If the layout item is itself a layout or a widget, steps 5-6 proceed        [... for widgets, overridden by QWidgetItem::setGeometry()]
    recursively down the tree, updating all of the items whose constraints have [... QWidget::setGeometry()]
    been modified.                                                              [... QWidgetPrivate::setGeometry_sys()]
                                                                                [... applies constraints, posts a QResizeEvent]
                                                                                [... i.e. drawing is deferred]

A layout update is an expensive operation, so there are a number of steps taken
to avoid unnecessary re-layouts:

-   Multiple layout update requests submitted in a single pass through the
    event loop are coalesced into a single update

-   Layout updates for widgets that are not visible and layouts that are not
    enabled are deferred until the widget is shown or the layout is re-enabled

-   The QLayoutItem::setGeometry() implementations will typically check whether
    the current and new geometry differ or whether they have been invalidated
    in some way before performing an update. This prunes parts of the widget
    tree from the layout process which have not been altered.

-   The QWidgetItem associated with a widget in a layout caches information
    which is expensive to calculate, such as sizeHint(). This cached data is
    then returned until the widget invalidates it using
    QWidget::updateGeometry()

Given this flow, there are a few things to bear in mind to avoid unexpected
behaviour:

-   Qt provides multiple ways to set constraints such as fixed and minimum
    sizes.

    -   Using QWidget::setFixedSize(), setMinimumSize() or setMaximumSize().
        This is simple and available whether you control the widget or not.

    -   Implementing the sizeHint() and minimumSizeHint() functions and using
        QWidget::setSizePolicy() to determine how these hints are handled by
        the layouts. If you control the widget, it is almost always preferable
        to use sizePolicy() together with the layout hints.

-   The layout management documentation suggests that handling LayoutRequest
    events in QWidget::event() is an alternative to implementing a custom
    layout. A potential problem with this is that LayoutRequest events are
    delivered asynchronously on the next pass through the event loop. If your
    widget is likely to update its own geometry in response to the
    LayoutRequest event then this can trigger layout flicker where several
    passes through the event loop occur before the layout process is fully
    finished. Each of the intermediate stages will flicker on screen briefly,
    as the event loop may process a paint event on each pass as well as the
    layout update, which looks poor. So if you need a custom layout,
    subclassing QLayout/QLayoutItem is the recommended approach unless you're
    sure that your widget will always be used as a top-level widget.

Posted by Robert Knight at 8:29 AM

[1] http://taligarsiel.com/Projects/howbrowserswork1.htm#Layout
[2] http://qt-project.org/doc/qt-4.8/layout.html


===============================================================================
When a widget is resized, what happens to its (child) layout?
===============================================================================

-   QLayout::widgetEvent(), which is protected and non-virtual, detects
    QEvent::Resize, QEvent::ChildRemoved, and QEvent::LayoutRequests.
    For a resize event, then unless the layout is already activated, it calls
    QLayoutPrivate::doResize(), which calls QLayout::setGeometry.
    Note that this does NOT by default invalidate the layout, as far as I can
    see.

-   It looks like this is done by QApplicationPrivate::notify_helper()
    [in qapplication.cpp] checking for any layout owned by any widget receiving
    an event, and sending that same event on to the layout via
    layout->widgetEvent(e).


===============================================================================
Thoughts within setGeometry()
===============================================================================

Once we've called qqGeomCalc, we know the distribution along the layout's
direction of interest. So, for HORIZONTAL layouts, we now know each widget's
width. That allows us then to go back and determine the layout's height...
But that doesn't help, because the layout's height is already set!
(In various forms, it's currently in r, cr, and s.)
So there's nothing else we can do here.

Can we trigger a layout resize here, though?
Logic would be:
- calculate final height based on children's heightForWidth()
- if our height is that, hoorah, and lay out our children
- if not, trigger a resize event that will come back here (having
  propagated any necessary changes to parents)
- ... but in that situation, don't bother to lay out children

We may have altered minimum_size / maximum_size / size_hint
within the array a, as above. Therefore we DO NOT use calcHfw() or
its results, which operate on the less constrained m_geom_array.

Is this really needed, though?

Well, yes, we are getting called here and saying things, for a
vertical layout, like "child 0 must be set to 610 pixels high,
because its minimum, maximum, and preferred height is 610, but
we only have 142 pixels of space for the layout, so qqGeomCalc is
saying 'call it 142, then'."

ATTEMPTED SOLUTION: the call to the parent widget's updateGeometry()
above.

That didn't work.

ANOTHER THOUGHT: if the width arriving at setGeometry() is the same as last
time, draw the widgets. If not, set the minimumSize() etc. according to the
width we've just received, then call invalidate (but in a way that doesn't
invalidate minimum size -- just calling the parent QLayout::invalidate()).

AT THE END OF setGeometry():
... the next bit is the critical bit that tells the widgets where to be, using
their own setGeometry() calls.
Note that for the direction of interest, it uses the "pos" and "size" elements
from QLayoutStruct, stored in a, copied from m_geom_array. For the
perpendicular direction, it uses the layout's overall dimension from s.
(Indirectly, the size of s will have been determined by the layout's
min/max/hint size.)


===============================================================================
My StackOverflow comments 2016-01-01
===============================================================================

I found this extremely problematic. I think the core of the problem is as
follows:

- Qt layouts are typically assigned to a widget that we can call the parent
  widget (with parentwidget->setLayout(layout)).

- Layouts ask their child widgets (or child layouts) for their size preferences
  (minimum size, size hint [preferred size], and maximum size). This is done in
  a slightly complex way via a QLayoutItem-derived class (e.g. QWidgetItem).

- Height-for-width (HFW) widgets -- those having hasHeightForWidth() == true
  and providing int heightForWidth(int width) -- have limited ability to
  describe their constraints to layouts, in that they can offer a
  minimumSizeHint(), a sizeHint(), and a heightForWidth(width). They can, if
  necessary, also call functions like setMinimumSize() and setMaximumSize().
  But most Qt layouts, like QVBoxLayout, QHBoxLayout, and QGridLayout, don't
  pay particular attention to the heightForWidth(width) results when offering
  their own min/preferred/max size to their parent, because they do so via
  QLayout::minimumSize(), QLayout::sizeHint(), and QLayout::maximumSize() --
  none of which are called with information about the layout's target size (in
  a Catch-22-like situation), so they can't easily provide the width value to
  their children.

- So, the layout asks its children how big they want to be without much HFW
  thought, and thus sets its own minimum/preferred/maximum size (determining,
  potentially in conjunction with other constraints, the size of the parent
  widget).

- After the layout has told its parent (and its parent, etc.) how much space it
  needs, Qt works out how big it thinks everything should be. The layout is
  called via its setGeometry(const QRect& layout_rect). Now the layout knows
  how big it is. It assigns space to its children with child->setGeometry().

- But only at this point has the layout discovered its final width. So up to
  this point, it cannot offer a final width to its children, and thus HFW
  widgets can't know their final width until they're being laid out finally. By
  this time, the layout and its parent may already have been set to the wrong
  height (can be too big; can be too small).

- An excellent description of the widget/layout interaction is at
  http://kdemonkey.blogspot.co.uk/2013/11/understanding-qwidget-layout-flow.html;
  beyond this, you're best off looking at the Qt source code itself.

- So you see two categories of solution, as you've outlined above, where size
  needs to be "properly" constrained to that required.

The first:

- HFW widgets, like QLabel-derived classes using word wrap, or images wanting
  to fix their aspect ratio, can provide sensible values for their minimum and
  maximum size, and a sensible sizeHint() (being the size they'd like to be).

- Then, when they're laid out, they (1) intercept
  QWidget::resizeEvent(QResizeEvent* event) to find out their new width (e.g.
  from event->size()); (2) calculate their preferred height via their own
  heightForWidth() function; and (3) force their height via, for example,
  setFixedHeight(height) followed by updateGeometry().

- This tends to work reasonably, except that any parent widget that wants to
  match its size to such an HFW widget has to do the same thing, e.g.
  intercepting resizeEvent, and if the parent widget has a layout with
  hasHeightForWidth() == true, doing something like
  setFixedHeight(layout->heightForWidth(width())); updateGeometry();.

- That leads to faff as you have to modify potentially arbitrary widgets in a
  long line of parenthood.

- It can also lead to quite a lot of redrawing, which can be slow and cause
  visual flickering.

The second:

- Rewrite the layouts.

- The best approach I've found is to have layouts calculate their children's
  geometry assuming some sort of standard rectangle (Qt itself often starts
  with a 640x480 one when drafting a layout); offering height information based
  on this draft; then, when setGeometry() is called, if the resulting height
  (based on a potentially new width) doesn't match what the layout previously
  advertised, re-constraining by calling parent->setFixedHeight().

- This allows you to use arbitrary widgets, and HFW widgets only need to
  support hasHeightForWidth() and heightForWidth() to have the new layouts (and
  their parent widgets, and any ancestor layouts using this mechanism) adjust
  their height.

- It can lead to some redrawing, but often not too much, as it happens on a
  per-layout not per-widget basis.

I've put C++ code at http://egret.psychol.cam.ac.uk/code/2017_01_16_qt_height_for_width/
for the following layouts:

- BoxLayoutHfw, VBoxLayoutHfw, HBoxLayoutHfw -- replacements for QBoxLayout
  etc.

- GridLayoutHfw -- replacements for QGridLayout.

- FlowLayoutHfw -- replacement for Qt's FlowLayout
  (https://doc.qt.io/qt-6.5/qtwidgets-layouts-flowlayout-example.html).

and the following widgets:

- AspectRatioPixmapLabel -- image maintaining its aspect ratio;

- LabelWordWrapWide -- word-wrapping label that tries to use as much horizontal
  space before it word-wraps.

- VerticalScrollArea -- as its name suggests, a vertical scroll area, but one
  that supports height-for-width cleanly.

... plus some infrastructure code (#defines etc.) that should make the layouts
revert to their Qt equivalent's behaviour, and some support files (including
gui_defines.h and layouts.h that make the choice of layout and base widget
conditional on your preference in this regard).

One residual problem that I've not successfully addressed is that I think
QLabel's heightForWidth() seems to return slightly wrong values (slightly
overestimating its space requirements) with stylesheets under some
circumstances. I suspect the problem is in QLabelPrivate::sizeForWidth but I've
just worked around it imperfectly by calculating some stylesheet borders; it's
still not quite right, but overestimating (leading to whitespace) is better
than underestimating (leading to clipping).


===============================================================================
Other notes
===============================================================================

QLAYOUTSIZE_MAX = INT_MAX / 256 / 16
    INT_MAX = __INT_MAX__ = 0x7FFFFFFF = 2,147,483,647
    => QLAYOUTSIZE_MAX = 524288

See also
- http://stackoverflow.com/questions/24264320/qt-layouts-keep-widget-aspect-ratio-while-resizing
- ? Google for "public qlayout" heightforwidth
- http://qt.shoutwiki.com/wiki/How_to_create_flexible_Portrait_-_Landscape_rotation_layout_in_Qt

- http://stackoverflow.com/questions/452333/how-to-maintain-widgets-aspect-ratio-in-qt/1160476#1160476
- http://thread.gmane.org/gmane.comp.lib.qt.general/18281


===============================================================================
July 2017: questionnaire overflowing to right on small phone screens
===============================================================================

- very hard to work out!
- the window containing a questionnaire wouldn't shrink properly in the
  DemoQuestionnaire, but would do so from the widget test screen
- turns out the problem is (I think) in QStacketLayout::minimumSize(), which
  asks *all the invisible widgets* for their minimum sizes; so the proximal
  cause was that the DemoQuestionnaire screen selection window (SingleTaskMenu),
  which has lots of edit buttons, was constraining the subsequent opened
  Questionnaire itself to be too wide.
- Potential solutions:
    - write a replacement for QStackedLayout +/- QStackedWidget
      ... not too hard as minimumSize() is virtual and we have our own public
          implementation of qSmartMinSize()
      ... use an alternative stack, e.g.
            - internal non-display stack of "off-screen" stuff
            - CamcopsApp uses QMainWindow::setCentralWidget()
            - the tricky part is then ownership; the QMainWindow takes
              ownership when setCentralWidget is used.
      ... use current QStackedLayout but also maintain a hidden stack
      An advantage of not just altering QStackedLayout is potentially some
      efficiency, if QStackedLayout keeps asking invisible children stuff.
